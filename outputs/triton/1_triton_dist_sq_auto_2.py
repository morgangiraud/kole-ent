"""
This file has been auto generated by triton after running the triton_dist_sq_compile.py file.
"""

from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile

from torch import empty_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers
from torch._inductor.triton_heuristics import grid, start_graph, end_graph
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream


@reduction(
    size_hints=[4, 2],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={
        "signature": {0: "*fp32", 1: "*fp32", 2: "i32", 3: "i32", 4: "i32", 5: "i32"},
        "device": 0,
        "device_type": "cuda",
        "constants": {},
        "mutated_arg_names": [],
        "autotune_hints": set(),
        "kernel_name": "triton_red_fused_pow_sub_sum_0",
        "configs": [
            instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=())
        ],
    },
)
@triton.jit
def triton_(in_ptr0, out_ptr0, ks0, ks1, xnumel, rnumel, XBLOCK: tl.constexpr, RBLOCK: tl.constexpr):
    # Compute offset
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel  # Guard to make sure we don't go out of the matrix size

    # Dynamic reduction working per block
    rbase = tl.arange(0, RBLOCK)[None, :]

    x1 = xindex // ks0
    x0 = xindex % ks0

    _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex

        tmp0 = tl.load(in_ptr0 + (r2 + (ks1 * x1)), rmask & xmask, eviction_policy="evict_last", other=0)
        tmp1 = tl.load(in_ptr0 + (r2 + (ks1 * x0)), rmask & xmask, eviction_policy="evict_last", other=0)
        tmp2 = tmp0 - tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = _tmp5 + tmp4
        _tmp5 = tl.where(rmask & xmask, tmp6, _tmp5)
    tmp5 = tl.sum(_tmp5, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp5, xmask)


def call(args):
    arg0_1, arg1_1, arg2_1 = args
    args.clear()
    s0 = arg0_1
    s1 = arg1_1
    assert_size_stride(arg2_1, (s0, s1), (s1, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)  # no-op to ensure context
        buf0 = empty_strided((s0, s0), (s0, 1), device="cuda", dtype=torch.float32)
        # Source Nodes: [pow_1, sub, sum_1], Original ATen: [aten.pow, aten.sub, aten.sum]
        triton_red_fused_pow_sub_sum_0_xnumel = s0 * s0
        stream0 = get_cuda_stream(0)
        triton_[grid(triton_red_fused_pow_sub_sum_0_xnumel)](
            arg2_1,
            buf0,
            s0,
            s1,
            triton_red_fused_pow_sub_sum_0_xnumel,
            s1,
            stream=stream0,
        )
        del arg2_1
        return (buf0,)


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance

    arg0_1 = 2
    arg1_1 = 2
    arg2_1 = rand_strided((2, 2), (2, 1), device="cuda:0", dtype=torch.float32)
    return print_performance(lambda: call([arg0_1, arg1_1, arg2_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main

    compiled_module_main("None", benchmark_compiled_module)
